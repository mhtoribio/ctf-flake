{ pkgs }:
pkgs.writeScriptBin "upload-kernel-exploit" ''
#!${pkgs.python3}/bin/python3
import argparse
import socket
import threading
from base64 import b64encode as b64e
import time
import datetime
import os

def do_recv(io):
    global is_ready
    while True:
        print(io.recv(512).decode(errors="ignore"), end="")

def send_command(cmd, prompt, print_cmd = True):
    if print_cmd:
        print(cmd)
    io.send(cmd.encode()+b"\n")
    while True:
        s = io.recv(2048)
        if prompt.encode() in s:
            return
        if b'Killed' in s and "Killed" not in b:
            print(f"Killed\t{datetime.datetime.now()}")
            exit(-1)

def send_file(src, dst, chunksize, prompt):
    with open(src, "rb") as f:
        file = f.read()
    f = b64e(file)

    send_command("rm -f {}.b64".format(dst), prompt)
    send_command("rm -f {}".format(dst), prompt)

    for i in range(len(f)//chunksize + 1):
        print("{} Sending chunk {}/{}".format(datetime.datetime.now(), i, len(f)//chunksize))
        send_command("echo -n '{}' >> {}.b64".format(f[i*chunksize:(i+1)*chunksize], dst), prompt, False)

    send_command("cat {}.b64 | base64 -d > {}".format(dst, dst), prompt)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("ip", type=str, help="Target IP address")
    parser.add_argument("port", type=int, help="Target Port")
    parser.add_argument("file", type=str, help="Exploit file to send")
    parser.add_argument("path", type=str, help="Path on remote")
    parser.add_argument("--prompt", type=str, help="Prompt character", default="$")
    parser.add_argument("--chunksize", type=int, help="Chunk size when uploading", default=800)
    args = parser.parse_args()
    io = socket.socket()
    io.connect((args.ip, args.port))
    send_file(args.file, args.path, args.chunksize, args.prompt)
    time.sleep(0.5)
    io.send(b"\n")
    threading.Thread(target=do_recv, args=[io]).start()
    io.send(b"\n")
    while True:
        io.send(input().encode() + b"\n")
        ''
